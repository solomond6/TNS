//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TNS.TNS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TNSSoap", Namespace="http://tempuri.org/")]
    public partial class TNS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateHTMLTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchsendinglistOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchsendingHtmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchsendingdashboardOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchALLCampaignsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchAllListOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchListByParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchtemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTestMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateListHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ADAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateListContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogErrorOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TNS() {
            this.Url = global::TNS.Properties.Settings.Default.TNS_TNS_TNS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateHTMLTemplateCompletedEventHandler CreateHTMLTemplateCompleted;
        
        /// <remarks/>
        public event StopCampaignCompletedEventHandler StopCampaignCompleted;
        
        /// <remarks/>
        public event FetchsendinglistCompletedEventHandler FetchsendinglistCompleted;
        
        /// <remarks/>
        public event FetchsendingHtmlCompletedEventHandler FetchsendingHtmlCompleted;
        
        /// <remarks/>
        public event FetchsendingdashboardCompletedEventHandler FetchsendingdashboardCompleted;
        
        /// <remarks/>
        public event FetchALLCampaignsCompletedEventHandler FetchALLCampaignsCompleted;
        
        /// <remarks/>
        public event FetchAllListCompletedEventHandler FetchAllListCompleted;
        
        /// <remarks/>
        public event FetchListByParamCompletedEventHandler FetchListByParamCompleted;
        
        /// <remarks/>
        public event FetchtemplatesCompletedEventHandler FetchtemplatesCompleted;
        
        /// <remarks/>
        public event SendTestMailCompletedEventHandler SendTestMailCompleted;
        
        /// <remarks/>
        public event FetchListCompletedEventHandler FetchListCompleted;
        
        /// <remarks/>
        public event CreateListHeaderCompletedEventHandler CreateListHeaderCompleted;
        
        /// <remarks/>
        public event ADAuthCompletedEventHandler ADAuthCompleted;
        
        /// <remarks/>
        public event CreateCampaignCompletedEventHandler CreateCampaignCompleted;
        
        /// <remarks/>
        public event CreateListContentCompletedEventHandler CreateListContentCompleted;
        
        /// <remarks/>
        public event LogErrorCompletedEventHandler LogErrorCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateHTMLTemplate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateHTMLTemplate(string template, string title, string createdby) {
            object[] results = this.Invoke("CreateHTMLTemplate", new object[] {
                        template,
                        title,
                        createdby});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHTMLTemplateAsync(string template, string title, string createdby) {
            this.CreateHTMLTemplateAsync(template, title, createdby, null);
        }
        
        /// <remarks/>
        public void CreateHTMLTemplateAsync(string template, string title, string createdby, object userState) {
            if ((this.CreateHTMLTemplateOperationCompleted == null)) {
                this.CreateHTMLTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHTMLTemplateOperationCompleted);
            }
            this.InvokeAsync("CreateHTMLTemplate", new object[] {
                        template,
                        title,
                        createdby}, this.CreateHTMLTemplateOperationCompleted, userState);
        }
        
        private void OnCreateHTMLTemplateOperationCompleted(object arg) {
            if ((this.CreateHTMLTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHTMLTemplateCompleted(this, new CreateHTMLTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopCampaign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StopCampaign(string CampaignID, string DeactivatedBy, string userkey, string uid) {
            object[] results = this.Invoke("StopCampaign", new object[] {
                        CampaignID,
                        DeactivatedBy,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StopCampaignAsync(string CampaignID, string DeactivatedBy, string userkey, string uid) {
            this.StopCampaignAsync(CampaignID, DeactivatedBy, userkey, uid, null);
        }
        
        /// <remarks/>
        public void StopCampaignAsync(string CampaignID, string DeactivatedBy, string userkey, string uid, object userState) {
            if ((this.StopCampaignOperationCompleted == null)) {
                this.StopCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopCampaignOperationCompleted);
            }
            this.InvokeAsync("StopCampaign", new object[] {
                        CampaignID,
                        DeactivatedBy,
                        userkey,
                        uid}, this.StopCampaignOperationCompleted, userState);
        }
        
        private void OnStopCampaignOperationCompleted(object arg) {
            if ((this.StopCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopCampaignCompleted(this, new StopCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetchsendinglist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Fetchsendinglist(string CampaignID, string userkey, string uid) {
            object[] results = this.Invoke("Fetchsendinglist", new object[] {
                        CampaignID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchsendinglistAsync(string CampaignID, string userkey, string uid) {
            this.FetchsendinglistAsync(CampaignID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchsendinglistAsync(string CampaignID, string userkey, string uid, object userState) {
            if ((this.FetchsendinglistOperationCompleted == null)) {
                this.FetchsendinglistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchsendinglistOperationCompleted);
            }
            this.InvokeAsync("Fetchsendinglist", new object[] {
                        CampaignID,
                        userkey,
                        uid}, this.FetchsendinglistOperationCompleted, userState);
        }
        
        private void OnFetchsendinglistOperationCompleted(object arg) {
            if ((this.FetchsendinglistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchsendinglistCompleted(this, new FetchsendinglistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchsendingHtml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchsendingHtml(string SenderID, string userkey, string uid) {
            object[] results = this.Invoke("FetchsendingHtml", new object[] {
                        SenderID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchsendingHtmlAsync(string SenderID, string userkey, string uid) {
            this.FetchsendingHtmlAsync(SenderID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchsendingHtmlAsync(string SenderID, string userkey, string uid, object userState) {
            if ((this.FetchsendingHtmlOperationCompleted == null)) {
                this.FetchsendingHtmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchsendingHtmlOperationCompleted);
            }
            this.InvokeAsync("FetchsendingHtml", new object[] {
                        SenderID,
                        userkey,
                        uid}, this.FetchsendingHtmlOperationCompleted, userState);
        }
        
        private void OnFetchsendingHtmlOperationCompleted(object arg) {
            if ((this.FetchsendingHtmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchsendingHtmlCompleted(this, new FetchsendingHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetchsendingdashboard", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Fetchsendingdashboard(string CampaignID, string userkey, string uid) {
            object[] results = this.Invoke("Fetchsendingdashboard", new object[] {
                        CampaignID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchsendingdashboardAsync(string CampaignID, string userkey, string uid) {
            this.FetchsendingdashboardAsync(CampaignID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchsendingdashboardAsync(string CampaignID, string userkey, string uid, object userState) {
            if ((this.FetchsendingdashboardOperationCompleted == null)) {
                this.FetchsendingdashboardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchsendingdashboardOperationCompleted);
            }
            this.InvokeAsync("Fetchsendingdashboard", new object[] {
                        CampaignID,
                        userkey,
                        uid}, this.FetchsendingdashboardOperationCompleted, userState);
        }
        
        private void OnFetchsendingdashboardOperationCompleted(object arg) {
            if ((this.FetchsendingdashboardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchsendingdashboardCompleted(this, new FetchsendingdashboardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchALLCampaigns", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchALLCampaigns(string src, string userkey, string uid) {
            object[] results = this.Invoke("FetchALLCampaigns", new object[] {
                        src,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchALLCampaignsAsync(string src, string userkey, string uid) {
            this.FetchALLCampaignsAsync(src, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchALLCampaignsAsync(string src, string userkey, string uid, object userState) {
            if ((this.FetchALLCampaignsOperationCompleted == null)) {
                this.FetchALLCampaignsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchALLCampaignsOperationCompleted);
            }
            this.InvokeAsync("FetchALLCampaigns", new object[] {
                        src,
                        userkey,
                        uid}, this.FetchALLCampaignsOperationCompleted, userState);
        }
        
        private void OnFetchALLCampaignsOperationCompleted(object arg) {
            if ((this.FetchALLCampaignsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchALLCampaignsCompleted(this, new FetchALLCampaignsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchAllList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchAllList(string src, string userkey, string uid) {
            object[] results = this.Invoke("FetchAllList", new object[] {
                        src,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchAllListAsync(string src, string userkey, string uid) {
            this.FetchAllListAsync(src, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchAllListAsync(string src, string userkey, string uid, object userState) {
            if ((this.FetchAllListOperationCompleted == null)) {
                this.FetchAllListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchAllListOperationCompleted);
            }
            this.InvokeAsync("FetchAllList", new object[] {
                        src,
                        userkey,
                        uid}, this.FetchAllListOperationCompleted, userState);
        }
        
        private void OnFetchAllListOperationCompleted(object arg) {
            if ((this.FetchAllListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchAllListCompleted(this, new FetchAllListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchListByParam", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchListByParam(string ListID, string src, string userkey, string uid) {
            object[] results = this.Invoke("FetchListByParam", new object[] {
                        ListID,
                        src,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchListByParamAsync(string ListID, string src, string userkey, string uid) {
            this.FetchListByParamAsync(ListID, src, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchListByParamAsync(string ListID, string src, string userkey, string uid, object userState) {
            if ((this.FetchListByParamOperationCompleted == null)) {
                this.FetchListByParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchListByParamOperationCompleted);
            }
            this.InvokeAsync("FetchListByParam", new object[] {
                        ListID,
                        src,
                        userkey,
                        uid}, this.FetchListByParamOperationCompleted, userState);
        }
        
        private void OnFetchListByParamOperationCompleted(object arg) {
            if ((this.FetchListByParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchListByParamCompleted(this, new FetchListByParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Fetchtemplates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Fetchtemplates(string type, string ID, string src, string userkey, string uid) {
            object[] results = this.Invoke("Fetchtemplates", new object[] {
                        type,
                        ID,
                        src,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchtemplatesAsync(string type, string ID, string src, string userkey, string uid) {
            this.FetchtemplatesAsync(type, ID, src, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchtemplatesAsync(string type, string ID, string src, string userkey, string uid, object userState) {
            if ((this.FetchtemplatesOperationCompleted == null)) {
                this.FetchtemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchtemplatesOperationCompleted);
            }
            this.InvokeAsync("Fetchtemplates", new object[] {
                        type,
                        ID,
                        src,
                        userkey,
                        uid}, this.FetchtemplatesOperationCompleted, userState);
        }
        
        private void OnFetchtemplatesOperationCompleted(object arg) {
            if ((this.FetchtemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchtemplatesCompleted(this, new FetchtemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendTestMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendTestMail(string ListID, string CampaignID, string searchparam, string searchparamvalue, string src, string userkey, string uid) {
            object[] results = this.Invoke("SendTestMail", new object[] {
                        ListID,
                        CampaignID,
                        searchparam,
                        searchparamvalue,
                        src,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendTestMailAsync(string ListID, string CampaignID, string searchparam, string searchparamvalue, string src, string userkey, string uid) {
            this.SendTestMailAsync(ListID, CampaignID, searchparam, searchparamvalue, src, userkey, uid, null);
        }
        
        /// <remarks/>
        public void SendTestMailAsync(string ListID, string CampaignID, string searchparam, string searchparamvalue, string src, string userkey, string uid, object userState) {
            if ((this.SendTestMailOperationCompleted == null)) {
                this.SendTestMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTestMailOperationCompleted);
            }
            this.InvokeAsync("SendTestMail", new object[] {
                        ListID,
                        CampaignID,
                        searchparam,
                        searchparamvalue,
                        src,
                        userkey,
                        uid}, this.SendTestMailOperationCompleted, userState);
        }
        
        private void OnSendTestMailOperationCompleted(object arg) {
            if ((this.SendTestMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTestMailCompleted(this, new SendTestMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchList(string ListID, string userkey, string uid) {
            object[] results = this.Invoke("FetchList", new object[] {
                        ListID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchListAsync(string ListID, string userkey, string uid) {
            this.FetchListAsync(ListID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchListAsync(string ListID, string userkey, string uid, object userState) {
            if ((this.FetchListOperationCompleted == null)) {
                this.FetchListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchListOperationCompleted);
            }
            this.InvokeAsync("FetchList", new object[] {
                        ListID,
                        userkey,
                        uid}, this.FetchListOperationCompleted, userState);
        }
        
        private void OnFetchListOperationCompleted(object arg) {
            if ((this.FetchListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchListCompleted(this, new FetchListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateListHeader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateListHeader(
                    string Uploadedby, 
                    string listname, 
                    string H1, 
                    string H2, 
                    string H3, 
                    string H4, 
                    string H5, 
                    string H6, 
                    string H7, 
                    string H8, 
                    string H9, 
                    string H10, 
                    string H11, 
                    string H12, 
                    string H13, 
                    string H14, 
                    string H15, 
                    string H16, 
                    string H17, 
                    string H18, 
                    string H19, 
                    string H20, 
                    string userkey, 
                    string uid) {
            object[] results = this.Invoke("CreateListHeader", new object[] {
                        Uploadedby,
                        listname,
                        H1,
                        H2,
                        H3,
                        H4,
                        H5,
                        H6,
                        H7,
                        H8,
                        H9,
                        H10,
                        H11,
                        H12,
                        H13,
                        H14,
                        H15,
                        H16,
                        H17,
                        H18,
                        H19,
                        H20,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateListHeaderAsync(
                    string Uploadedby, 
                    string listname, 
                    string H1, 
                    string H2, 
                    string H3, 
                    string H4, 
                    string H5, 
                    string H6, 
                    string H7, 
                    string H8, 
                    string H9, 
                    string H10, 
                    string H11, 
                    string H12, 
                    string H13, 
                    string H14, 
                    string H15, 
                    string H16, 
                    string H17, 
                    string H18, 
                    string H19, 
                    string H20, 
                    string userkey, 
                    string uid) {
            this.CreateListHeaderAsync(Uploadedby, listname, H1, H2, H3, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, userkey, uid, null);
        }
        
        /// <remarks/>
        public void CreateListHeaderAsync(
                    string Uploadedby, 
                    string listname, 
                    string H1, 
                    string H2, 
                    string H3, 
                    string H4, 
                    string H5, 
                    string H6, 
                    string H7, 
                    string H8, 
                    string H9, 
                    string H10, 
                    string H11, 
                    string H12, 
                    string H13, 
                    string H14, 
                    string H15, 
                    string H16, 
                    string H17, 
                    string H18, 
                    string H19, 
                    string H20, 
                    string userkey, 
                    string uid, 
                    object userState) {
            if ((this.CreateListHeaderOperationCompleted == null)) {
                this.CreateListHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateListHeaderOperationCompleted);
            }
            this.InvokeAsync("CreateListHeader", new object[] {
                        Uploadedby,
                        listname,
                        H1,
                        H2,
                        H3,
                        H4,
                        H5,
                        H6,
                        H7,
                        H8,
                        H9,
                        H10,
                        H11,
                        H12,
                        H13,
                        H14,
                        H15,
                        H16,
                        H17,
                        H18,
                        H19,
                        H20,
                        userkey,
                        uid}, this.CreateListHeaderOperationCompleted, userState);
        }
        
        private void OnCreateListHeaderOperationCompleted(object arg) {
            if ((this.CreateListHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateListHeaderCompleted(this, new CreateListHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ADAuth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ADAuth(string SapID, string pass, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid) {
            object[] results = this.Invoke("ADAuth", new object[] {
                        SapID,
                        pass,
                        BrowserUsed,
                        ipaddress,
                        windowsuser,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ADAuthAsync(string SapID, string pass, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid) {
            this.ADAuthAsync(SapID, pass, BrowserUsed, ipaddress, windowsuser, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ADAuthAsync(string SapID, string pass, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid, object userState) {
            if ((this.ADAuthOperationCompleted == null)) {
                this.ADAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnADAuthOperationCompleted);
            }
            this.InvokeAsync("ADAuth", new object[] {
                        SapID,
                        pass,
                        BrowserUsed,
                        ipaddress,
                        windowsuser,
                        userkey,
                        uid}, this.ADAuthOperationCompleted, userState);
        }
        
        private void OnADAuthOperationCompleted(object arg) {
            if ((this.ADAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ADAuthCompleted(this, new ADAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateCampaign", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateCampaign(
                    string Uploadedby, 
                    string ParamiterizedTemplate, 
                    string ListID, 
                    string CampaignName, 
                    string StartDate, 
                    string EndDate, 
                    string SenderName, 
                    string SenderEmail, 
                    string EmailTitle, 
                    string CC, 
                    string Recipient, 
                    string Attachment, 
                    string Bcc, 
                    string cycle, 
                    string deliverytype, 
                    string campaigntype, 
                    string userkey, 
                    string uid) {
            object[] results = this.Invoke("CreateCampaign", new object[] {
                        Uploadedby,
                        ParamiterizedTemplate,
                        ListID,
                        CampaignName,
                        StartDate,
                        EndDate,
                        SenderName,
                        SenderEmail,
                        EmailTitle,
                        CC,
                        Recipient,
                        Attachment,
                        Bcc,
                        cycle,
                        deliverytype,
                        campaigntype,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCampaignAsync(
                    string Uploadedby, 
                    string ParamiterizedTemplate, 
                    string ListID, 
                    string CampaignName, 
                    string StartDate, 
                    string EndDate, 
                    string SenderName, 
                    string SenderEmail, 
                    string EmailTitle, 
                    string CC, 
                    string Recipient, 
                    string Attachment, 
                    string Bcc, 
                    string cycle, 
                    string deliverytype, 
                    string campaigntype, 
                    string userkey, 
                    string uid) {
            this.CreateCampaignAsync(Uploadedby, ParamiterizedTemplate, ListID, CampaignName, StartDate, EndDate, SenderName, SenderEmail, EmailTitle, CC, Recipient, Attachment, Bcc, cycle, deliverytype, campaigntype, userkey, uid, null);
        }
        
        /// <remarks/>
        public void CreateCampaignAsync(
                    string Uploadedby, 
                    string ParamiterizedTemplate, 
                    string ListID, 
                    string CampaignName, 
                    string StartDate, 
                    string EndDate, 
                    string SenderName, 
                    string SenderEmail, 
                    string EmailTitle, 
                    string CC, 
                    string Recipient, 
                    string Attachment, 
                    string Bcc, 
                    string cycle, 
                    string deliverytype, 
                    string campaigntype, 
                    string userkey, 
                    string uid, 
                    object userState) {
            if ((this.CreateCampaignOperationCompleted == null)) {
                this.CreateCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCampaignOperationCompleted);
            }
            this.InvokeAsync("CreateCampaign", new object[] {
                        Uploadedby,
                        ParamiterizedTemplate,
                        ListID,
                        CampaignName,
                        StartDate,
                        EndDate,
                        SenderName,
                        SenderEmail,
                        EmailTitle,
                        CC,
                        Recipient,
                        Attachment,
                        Bcc,
                        cycle,
                        deliverytype,
                        campaigntype,
                        userkey,
                        uid}, this.CreateCampaignOperationCompleted, userState);
        }
        
        private void OnCreateCampaignOperationCompleted(object arg) {
            if ((this.CreateCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCampaignCompleted(this, new CreateCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateListContent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateListContent(
                    string Uploadedby, 
                    string listID, 
                    string H1, 
                    string H2, 
                    string H3, 
                    string H4, 
                    string H5, 
                    string H6, 
                    string H7, 
                    string H8, 
                    string H9, 
                    string H10, 
                    string H11, 
                    string H12, 
                    string H13, 
                    string H14, 
                    string H15, 
                    string H16, 
                    string H17, 
                    string H18, 
                    string H19, 
                    string H20, 
                    string userkey, 
                    string uid) {
            object[] results = this.Invoke("CreateListContent", new object[] {
                        Uploadedby,
                        listID,
                        H1,
                        H2,
                        H3,
                        H4,
                        H5,
                        H6,
                        H7,
                        H8,
                        H9,
                        H10,
                        H11,
                        H12,
                        H13,
                        H14,
                        H15,
                        H16,
                        H17,
                        H18,
                        H19,
                        H20,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateListContentAsync(
                    string Uploadedby, 
                    string listID, 
                    string H1, 
                    string H2, 
                    string H3, 
                    string H4, 
                    string H5, 
                    string H6, 
                    string H7, 
                    string H8, 
                    string H9, 
                    string H10, 
                    string H11, 
                    string H12, 
                    string H13, 
                    string H14, 
                    string H15, 
                    string H16, 
                    string H17, 
                    string H18, 
                    string H19, 
                    string H20, 
                    string userkey, 
                    string uid) {
            this.CreateListContentAsync(Uploadedby, listID, H1, H2, H3, H4, H5, H6, H7, H8, H9, H10, H11, H12, H13, H14, H15, H16, H17, H18, H19, H20, userkey, uid, null);
        }
        
        /// <remarks/>
        public void CreateListContentAsync(
                    string Uploadedby, 
                    string listID, 
                    string H1, 
                    string H2, 
                    string H3, 
                    string H4, 
                    string H5, 
                    string H6, 
                    string H7, 
                    string H8, 
                    string H9, 
                    string H10, 
                    string H11, 
                    string H12, 
                    string H13, 
                    string H14, 
                    string H15, 
                    string H16, 
                    string H17, 
                    string H18, 
                    string H19, 
                    string H20, 
                    string userkey, 
                    string uid, 
                    object userState) {
            if ((this.CreateListContentOperationCompleted == null)) {
                this.CreateListContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateListContentOperationCompleted);
            }
            this.InvokeAsync("CreateListContent", new object[] {
                        Uploadedby,
                        listID,
                        H1,
                        H2,
                        H3,
                        H4,
                        H5,
                        H6,
                        H7,
                        H8,
                        H9,
                        H10,
                        H11,
                        H12,
                        H13,
                        H14,
                        H15,
                        H16,
                        H17,
                        H18,
                        H19,
                        H20,
                        userkey,
                        uid}, this.CreateListContentOperationCompleted, userState);
        }
        
        private void OnCreateListContentOperationCompleted(object arg) {
            if ((this.CreateListContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateListContentCompleted(this, new CreateListContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogError(string RecordID, string RecordID2, string RecordID3, string Section, string Section2, string Section3, string Description, string Verbose, int Status) {
            object[] results = this.Invoke("LogError", new object[] {
                        RecordID,
                        RecordID2,
                        RecordID3,
                        Section,
                        Section2,
                        Section3,
                        Description,
                        Verbose,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogErrorAsync(string RecordID, string RecordID2, string RecordID3, string Section, string Section2, string Section3, string Description, string Verbose, int Status) {
            this.LogErrorAsync(RecordID, RecordID2, RecordID3, Section, Section2, Section3, Description, Verbose, Status, null);
        }
        
        /// <remarks/>
        public void LogErrorAsync(string RecordID, string RecordID2, string RecordID3, string Section, string Section2, string Section3, string Description, string Verbose, int Status, object userState) {
            if ((this.LogErrorOperationCompleted == null)) {
                this.LogErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogErrorOperationCompleted);
            }
            this.InvokeAsync("LogError", new object[] {
                        RecordID,
                        RecordID2,
                        RecordID3,
                        Section,
                        Section2,
                        Section3,
                        Description,
                        Verbose,
                        Status}, this.LogErrorOperationCompleted, userState);
        }
        
        private void OnLogErrorOperationCompleted(object arg) {
            if ((this.LogErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogErrorCompleted(this, new LogErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateHTMLTemplateCompletedEventHandler(object sender, CreateHTMLTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHTMLTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHTMLTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StopCampaignCompletedEventHandler(object sender, StopCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchsendinglistCompletedEventHandler(object sender, FetchsendinglistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchsendinglistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchsendinglistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchsendingHtmlCompletedEventHandler(object sender, FetchsendingHtmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchsendingHtmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchsendingHtmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchsendingdashboardCompletedEventHandler(object sender, FetchsendingdashboardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchsendingdashboardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchsendingdashboardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchALLCampaignsCompletedEventHandler(object sender, FetchALLCampaignsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchALLCampaignsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchALLCampaignsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchAllListCompletedEventHandler(object sender, FetchAllListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchAllListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchAllListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchListByParamCompletedEventHandler(object sender, FetchListByParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchListByParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchListByParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchtemplatesCompletedEventHandler(object sender, FetchtemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchtemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchtemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendTestMailCompletedEventHandler(object sender, SendTestMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTestMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTestMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchListCompletedEventHandler(object sender, FetchListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateListHeaderCompletedEventHandler(object sender, CreateListHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateListHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateListHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ADAuthCompletedEventHandler(object sender, ADAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ADAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ADAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateCampaignCompletedEventHandler(object sender, CreateCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateListContentCompletedEventHandler(object sender, CreateListContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateListContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateListContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogErrorCompletedEventHandler(object sender, LogErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591